BACKEND

    1.Instalaciones

        Backend/

            npm i 
                express 
                body-parser 
                bcrypt
                cors
                dotenv
                gridfs-stream (upload files)
                multer
                multer-gridfs-storage
                helmet
                morgan
                jsonwebtoken
                mongoose
            
            npm init -y

            package.json/
                "type": "module"

    2.Configuracion inicial index.js

        Backend/

            index.js

                - CONFIGURATIONS
                    Middlewares

                - FILE STORAGE
                    Multer es una librería que nos ayuda a subir archivos
                        destination
                        filename 

                - MongoDb

                    Create a Shared Cluster

                    - Seguir los pasos indicados en el commit 15.Conectarse a las bases de datos MongoDb en 
                        el repositorio AmazonaPro
                        
                        - UserName -> gabsocialmediapp
                        Password -> cristgab1922

                    - Add entries to your IP Access List
                            Add My Current IP Adress
                        
                    -  Finalizar creacion

                    Connect 
                        Connect your application
                        Copy conecction string y copiarla en la variable de entorno MONGO_URL (Backend/.env)
                    
                    MONGOOSE SETUP (backend/index.js)
                        mongoose.connect(...)
                    
                    Probar conexion a MongoDb
                        backend/ -> nodemon index.js

    3.Autenticacion y Autorizacion

        - Autenticacion

                models/ -> User.js
                    Schema de los Usuarios
                
                controllers/ -> auth.js (Acceso a la bd)

                    register:
                        Toma los datos datos en el body de la request
                        y guarda la informacion en la base de datos

                    login:
                        Si el usuario existe valida que la contraseña ingresada corresponda con 
                        la guardada en la base de datos
                        Se genera un token en caso de que las credenciales sean correctas
                    
                
                routes/ -> auth.js
                    Endpoints de auth precedidos por /auth : /login,
                    Los endpoints llaman a las funciones de los controladores
            
        - Autorizacion
    
            middleware/ -> auth.js
                verifyToken :
                    Verifica que el token enviado corresponda con el JWT_SECRET

        - index.js
            '/auth' -> authRoutes

    4.Users Routes

        index.js
            app.use('/users', userRoutes);
        
        routes/ -> users.js

            Endpoints para:
                . Buscar un usuario
                . Obtener la lista de amigos de un usuario
                . Actualizar lista de amigos (agregar o eliminar)
            
            Cada uno de los endpoints esta protegido por el verifyToken
        
        controllers/ -> users_controller.js

            listFriends(userId):
                Con el id de un , se busca el usuario y se retorna su lista de amigos
            
            getUser():
                Se busca al usuario por medio de un findById()
            
            getUserFriends():
                Toma el id del usario pasado como parámetro y lo envia a la funcion listFriends
            
            addRemoveFriend():

                En caso de que la lista de amigos del usario incluya el friendId proporcionado,
                se eliminará el amigo de la lista del usuraio y en la lista de amigos que corresponde
                al usuario con el frindId se eliminará el usuario.

                En caso contrario se agregarán a la lista de amigos
        
    5.Post Routes

        index.js

            '/posts' ->  postRoutes
            
            post('/posts') ->
                Crear un Post,se pone este endpoint en el index porque se necesita subir
                una imagen

        routes/ -> postRoutes.js

            Endpoints protegidos con verifyToken:
                '/' -> Obtemer todos los posts(home)
                '/:userId/posts' -> Obtener los posts de un usuario
                '/:id/like' -> Like o deslike
        
        controllers/ -> postController.js

            createPost
                Recibe tres parámetros (userId, description, picturePath)
                Busca el usuario con su id
                Crea el nueva post y toma algunos datos del usuario
                Retorna todos los post
            
            getFeedPosts
                Retorna todos los posts
            
            getUserPosts
                Retorna todos los posts filtrando por el userId proporcionado como
                parámetro  
            
            likePost
                Se busca el post con el id proporcionado como parámetro

                Verifica que en la lista de likes este el userId

                    Afirmativo:
                        Significa que el usuario ya le dio like, entonces se elimina

                    Negativo:
                        Se agrega el like

    6.Backend Data Add 

        data/dataDemo.js
            Archivo con datos de ejemplo para users y posts
        
        index.js
            Insert Many al iniciar el servidor
            Comentar, para evitar datos duplicados
    
FRONTEND

    frontend/ 

    7.Frontend Instalation and Setup

        Iniciar proyecto

            npx create-react-app ./
            En caso de que no se tenga instalado npx -> npm i -g npx

        Instalaciones

            npm i :
              react-redux
              @reduxjs/toolkit
              redux-persist
              react-dropzone
              dotenv
              formik
              yup
              react-router-dom@6
              @mui/material
              @emotion/styled
              @mui/icons-material
        
        Logos
            public/assets
                linkedin y twitter
        
        Estructura básica de src/
            App.js
            index.css
            index.js
        
        Index.css
            Import de Google Fonts
            Estilos globales
                height,width,font-family
        
        jsconfig.json
            compilerOptions
            include
    
    8.Folder Architecture and React Router

        Estructura de carpetas en src/

            scenes/
                homePage
                loginPage
                navbar
                profilePage
                widgets

                Dentro de cada uno de estos hacer su correspondiente index
            
            components
            state/ -> indexState.js
        
        src/App.js
            Rutas
        
    9.Configurando State

        src/state -> indexState.js

            initialState 

            authSlice

                reducers: Son las funciones que nos permiten modificar el initialState

                    setMode -> Cambiar de modo claro a oscuro y viceversa

                    setLogin -> El user y el token por defecto son null,
                                Esta funcion modifica sus valores con lo que se pase como páramtero (action)

                    setLogout -> user y token volverán a ser null

                    setFriends -> Si ya se ha logueado el usuario la lista de usuarios será igual a la
                                que se pase como parámetro en el action
                    
                    setPosts -> Los posts serán igual a los que se pasen como parámetro

                    setPosts -> Actualizar Post
                                Se recorre la lista de posts 
                                Si el postId conrresponde con el id del post que se envio como parámetro, se Actualizar
        

        src/index.js

            Configurar redux-persists

                 Con la biblioteca Redux Persist, los desarrolladores pueden guardar la tienda Redux en un almacenamiento persistente, 
                 por ejemplo, el almacenamiento local

                Incluso después de actualizar el navegador, se conservará el estado del sitio

    10.Color, Theme, Dark Mode, and Styling Setup

        src/theme.js
            Configuracion de colores y tipografía

        src/App.js
            Aplicar theme

        src/components/ -> FlexBetween.jsx
            Estilos que vamos a reutilizar (alineaciones) 

    11.Navbar
        El hook useMediaQuery sirve para determinar si el ancho de la pantalla es suficiente
        Ayuda a que sea responsive
    
    12.Register, Login Pages, and Form

        src/loginPage

            Form.jsx

                El formulario tiene un schema tanto para login como para register

                Si el usuario al ingresar la información no cumple con los requerimientos de los campos
                se mostrarán los mensajes indicando las condiciones para cada campo

                La funcion handleFormSubmit() evaluará si lo que se desea es registrarse o loguearse y llamará a las
                funciones register() o login() según sea el caso, las cuales llamarán a la API
            
            indexLoginPage.jsx

                Nombre de la app y parráfo de bienvenida
                Importará el formulario

    13.Home Page: Widget del Usuario 

        components/WidgetWrapper.jsx
            Estilos generales para los widgets:
                padding,backgroundColor,borderRadius

        components/UserImage.jsx
            Estilos para la foto del perfil
            
        widgets/UserWidget.jsx

            Hace una solicitud a la API para buscar al usuario con el _id enviado

            Muestra la informacion del usuario:
                Foto,nombre,amigos
                Location,profesion
                Vistas,impresiones
                Redes Sociales
            
        homePage/indexHomePage.jsx
            Accede al usuario que se ha logueado y envia su _id al componente UserWidget

    
            

