BACKEND

    1.Instalaciones

        Backend/

            npm i 
                express 
                body-parser 
                bcrypt
                cors
                dotenv
                gridfs-stream (upload files)
                multer
                multer-gridfs-storage
                helmet
                morgan
                jsonwebtoken
                mongoose
            
            npm init -y

            package.json/
                "type": "module"

    2.Configuracion inicial index.js

        Backend/

            index.js

                - CONFIGURATIONS
                    Middlewares

                - FILE STORAGE
                    Multer es una librería que nos ayuda a subir archivos
                        destination
                        filename 

                - MongoDb

                    Create a Shared Cluster

                    - Seguir los pasos indicados en el commit 15.Conectarse a las bases de datos MongoDb en 
                        el repositorio AmazonaPro
                        
                        - UserName -> gabsocialmediapp
                        Password -> cristgab1922

                    - Add entries to your IP Access List
                            Add My Current IP Adress
                        
                    -  Finalizar creacion

                    Connect 
                        Connect your application
                        Copy conecction string y copiarla en la variable de entorno MONGO_URL (Backend/.env)
                    
                    MONGOOSE SETUP (backend/index.js)
                        mongoose.connect(...)
                    
                    Probar conexion a MongoDb
                        backend/ -> nodemon index.js

    3.Autenticacion y Autorizacion

        - Autenticacion

                models/ -> User.js
                    Schema de los Usuarios
                
                controllers/ -> auth.js (Acceso a la bd)

                    register:
                        Toma los datos datos en el body de la request
                        y guarda la informacion en la base de datos

                    login:
                        Si el usuario existe valida que la contraseña ingresada corresponda con 
                        la guardada en la base de datos
                        Se genera un token en caso de que las credenciales sean correctas
                    
                
                routes/ -> auth.js
                    Endpoints de auth precedidos por /auth : /login,
                    Los endpoints llaman a las funciones de los controladores
            
        - Autorizacion
    
            middleware/ -> auth.js
                verifyToken :
                    Verifica que el token enviado corresponda con el JWT_SECRET

        - index.js
            '/auth' -> authRoutes

    4.Users Routes

        index.js
            app.use('/users', userRoutes);
        
        routes/ -> users.js

            Endpoints para:
                . Buscar un usuario
                . Obtener la lista de amigos de un usuario
                . Actualizar lista de amigos (agregar o eliminar)
            
            Cada uno de los endpoints esta protegido por el verifyToken
        
        controllers/ -> users_controller.js

            listFriends(userId):
                Con el id de un , se busca el usuario y se retorna su lista de amigos
            
            getUser():
                Se busca al usuario por medio de un findById()
            
            getUserFriends():
                Toma el id del usario pasado como parámetro y lo envia a la funcion listFriends
            
            addRemoveFriend():

                En caso de que la lista de amigos del usario incluya el friendId proporcionado,
                se eliminará el amigo de la lista del usuraio y en la lista de amigos que corresponde
                al usuario con el frindId se eliminará el usuario.

                En caso contrario se agregarán a la lista de amigos
        
    5.Post Routes

        index.js

            '/posts' ->  postRoutes
            
            post('/posts') ->
                Crear un Post,se pone este endpoint en el index porque se necesita subir
                una imagen

        routes/ -> postRoutes.js

            Endpoints protegidos con verifyToken:
                '/' -> Obtemer todos los posts(home)
                '/:userId/posts' -> Obtener los posts de un usuario
                '/:id/like' -> Like o deslike
        
        controllers/ -> postController.js

            createPost
                Recibe tres parámetros (userId, description, picturePath)
                Busca el usuario con su id
                Crea el nueva post y toma algunos datos del usuario
                Retorna todos los post
            
            getFeedPosts
                Retorna todos los posts
            
            getUserPosts
                Retorna todos los posts filtrando por el userId proporcionado como
                parámetro  
            
            likePost
                Se busca el post con el id proporcionado como parámetro

                Verifica que en la lista de likes este el userId

                    Afirmativo:
                        Significa que el usuario ya le dio like, entonces se elimina

                    Negativo:
                        Se agrega el like
